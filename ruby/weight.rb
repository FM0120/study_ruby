# 文字列
# シングルクォーテーション（'）やダブルクォーテーション（"）で囲むことで、文字列として出力されます。
# 文字列に対するメソッドは、length、reverse、include?.rbでいくつか学びました。
# ここでは新たに「変数展開」を扱います。

# 変数展開とは
# 読んで字の如く、変数の中身を展開することです。

# これから、「Aさんの体重は50kgです」と出力するプログラムを作成していきます。
name = "A"
weight = 50

# length、reverse、include?.rbでは、+を用いて文字列を連結しました。
# また、整数型のものを変換する際は、to_sを用いて文字列型に変換することで、
# +による連結が可能になりました。
# いま、weight.rbでは

# 文字列型「A」が格納された変数name
# 整数型50が格納された変数weight
# がありますので、以上のことを踏まえると、
# 「Aさんの体重は50kgです」と出力するために以下のようなコードを追加します。

puts name + "さんの体重は" + weight.to_s + "kgです"  

# 変数展開のコードを追加する
# さて、今のコードも正しいのですが、
# 変数を扱うようになると、整数型か文字列型か少しわかりづらくなり、to_sを付けるべきか悩んでしまいますね。
# そこで、変数展開の出番になります。
# 変数展開を用いると、元の変数がどのような型であっても文字列型に変換してくれます。
# 変数展開は以下のように使用します。

puts "#{name}さんの体重は#{weight}kgです"

# 上のように「Aさんの体重は50kgです」が2回出力されれば成功です。
# weight.rbの4行目と5行目は同じ意味合いですが、

# +による連結に比べてコード量が減る
# 変数の型を気にする必要がない
# という点で便利になります。

# 変数展開の注意
# ただし、変数展開はダブルクォーテーションで括った場合のみ機能し、
# シングルクォーテーションで括った場合は変数ではなく文字列として認識されてしまいます。

# 実際に試してみましょう。
# weight.rbの最終行に以下のコードを追加します。

# 48行目のダブルクォーテーションがシングルクォーテーションに変わっただけですが、実行結果が大きく異なってしまいます。
puts '#{name}さんの体重は#{weight}kgです'

# 「#{name}」「#{weight}」がそのまま出力されてしまいました。
# シングルクォーテーションとダブルクォーテーションはほとんど同じ役割ですが、
# 変数展開を用いる際は、ダブルクォーテーションを使わないといけないということは覚えておきましょう。

